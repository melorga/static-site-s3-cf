name: Deploy Static Site Infrastructure

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  TF_VERSION: '1.8.5'
  AWS_REGION: 'us-east-1'

jobs:
  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: |
        terraform fmt -check -recursive .
        if [ $? -ne 0 ]; then
          echo "Some files need formatting. Run 'terraform fmt -recursive .' to fix."
          exit 1
        fi

    - name: Terraform Init (Module)
      run: terraform init
      working-directory: ./modules/s3-cloudfront

    - name: Terraform Validate (Module)
      run: terraform validate
      working-directory: ./modules/s3-cloudfront

    - name: Terraform Init (Example)
      run: terraform init
      working-directory: ./examples/basic

    - name: Terraform Validate (Example)
      run: terraform validate
      working-directory: ./examples/basic

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: terraform-validate
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [terraform-validate, security-scan]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: terraform init
      working-directory: ./examples/basic

    - name: Terraform Plan
      run: terraform plan -no-color
      working-directory: ./examples/basic
      continue-on-error: true

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [terraform-validate, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: terraform init
      working-directory: ./examples/basic

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ./examples/basic

    - name: Get Website URL
      run: |
        WEBSITE_URL=$(terraform output -raw website_url)
        echo "Website deployed at: $WEBSITE_URL"
        echo "WEBSITE_URL=$WEBSITE_URL" >> $GITHUB_ENV
      working-directory: ./examples/basic

  lighthouse-audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Wait for site to be available
      run: |
        echo "Waiting for site to be available..."
        sleep 60

    - name: Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          ${{ env.WEBSITE_URL }}
        uploadArtifacts: true
        temporaryPublicStorage: true
